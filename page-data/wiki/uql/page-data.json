{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/wiki/uql/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Grafana Infinity Datasource","description":"Do infinite things with Grafana. Turn any website into beautiful grafana dashboards. Supports HTML, CSV, JSON, XML & GraphQL documents.","socialImage":"https://user-images.githubusercontent.com/153843/92741922-03491380-f377-11ea-9c31-9a744afd3388.png","website":"https://yesoreyeram.github.io/grafana-infinity-datasource"}},"markdownRemark":{"html":"<h2>UQL</h2>\n<p>UQL (Unstructured query language) is advance query format in infinity datasource which will consolidate JSON, CSV, XML, GraphQL formats. UQL also provides ability to customize the results.</p>\n<p>UQL is an opinionated query language designed for in-memory operations. UQL query can be formed with list of commands joined by <code>|</code>, in a line each.\nMost of the times, fields are referred within double quotes and string values are referred with single quotes. UQL was inspired by kusto query language and follows similar syntax.</p>\n<blockquote>\n<p>UQL is still in BETA.</p>\n</blockquote>\n<p>if your data looks like this,</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;id&quot;: 1, &quot;name&quot;: { &quot;firstName&quot;: &quot;john&quot;, &quot;lastName&quot;: &quot;doe&quot; }, &quot;dob&quot;: &quot;1985-01-01&quot;, &quot;city&quot;: &quot;chennai&quot; },\n  { &quot;id&quot;: 2, &quot;name&quot;: { &quot;firstName&quot;: &quot;alice&quot;, &quot;lastName&quot;: &quot;bob&quot; }, &quot;dob&quot;: &quot;1990-12-31&quot;, &quot;city&quot;: &quot;london&quot; }\n]</code>\n        </deckgo-highlight-code>\n<p>then the following UQL query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| extend &quot;full name&quot;=strcat(&quot;name.firstName&quot;,&#39; &#39;,&quot;name.lastName&quot;), &quot;dob&quot;=todatetime(&quot;dob&quot;)\n| project &quot;id&quot;, &quot;full name&quot;, &quot;dob&quot;, &quot;date of birth&quot;=&quot;dob&quot;\n| order by &quot;full name&quot; asc</code>\n        </deckgo-highlight-code>\n<p>will produce four column table (id,full name, dob, date of birth).</p>\n<h3>Basic UQL commands</h3>\n<p>following are the basic UQL commands. All these commands are available in all the version unless specified.</p>\n<h3>project</h3>\n<p><code>project</code> command is used to select the columns to include in the results. If you want to select a property inside a nested object, you can use dot notation. Optionally, you can also alias the fields.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| project &quot;id&quot;, &quot;name.firstName&quot;, &quot;date of birth&quot;=&quot;dob&quot;</code>\n        </deckgo-highlight-code>\n<h3>project-away</h3>\n<p><code>project-away</code> command is exactly opposite as <code>project</code>. It just drops specific columns from the data. It doesn't support alias or dot notation selector.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| project-away &quot;id&quot;, &quot;city&quot;</code>\n        </deckgo-highlight-code>\n<h3>order by</h3>\n<p><code>order by</code> command sorts the input based on any column. sort direction should be either <code>asc</code> or <code>desc</code></p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| order by &quot;full name&quot; asc</code>\n        </deckgo-highlight-code>\n<h3>extend</h3>\n<p><code>extend</code> command is similar to <code>project</code>. but instead of selecting the columns, it just adds/replace columns in existing data. <code>extends</code> expects an alias and a function.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| extend &quot;dob&quot;=todatetime(&quot;dob&quot;), &quot;city&quot;=toupper(&quot;city&quot;)</code>\n        </deckgo-highlight-code>\n<p>following are some of the available functions</p>\n<table>\n<thead>\n<tr>\n<th>function keyword</th>\n<th>syntax</th>\n<th>description</th>\n<th>available from</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trim</td>\n<td>trim(\"name\")</td>\n<td>trims the string</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>trim_start</td>\n<td>trim_start(\"name\")</td>\n<td>removes the space before</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>trim_end</td>\n<td>trim_end(\"name\")</td>\n<td>removes the space after</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>tonumber</td>\n<td>tonumber(\"age\")</td>\n<td>converts a string into number</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>tostring</td>\n<td>tostring(\"age\")</td>\n<td>converts a number into string</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>todatetime</td>\n<td>todatetime(\"age\")</td>\n<td>converts a datetime string into datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_seconds_todatetime</td>\n<td>unixtime_seconds_todatetime(\"dob\")</td>\n<td>converts unix epoch s timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_nanoseconds_todatetime</td>\n<td>unixtime_nanoseconds_todatetime(\"dob\")</td>\n<td>converts unix epoch ns timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_milliseconds_todatetime</td>\n<td>unixtime_milliseconds_todatetime(\"dob\")</td>\n<td>converts unix epoch ms timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_microseconds_todatetime</td>\n<td>unixtime_microseconds_todatetime(\"dob\")</td>\n<td>converts unix epoch microsecond timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>format_datetime</td>\n<td>format_datetime(\"dob\",'DD/MM/YYYY')</td>\n<td>converts datetime to a specific format</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>add_datetime</td>\n<td>add_datetime(\"dob\",'-1d')</td>\n<td>adds duration to a datetime field</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofminute</td>\n<td>startofminute(\"dob\")</td>\n<td>rounds the datetime field to the starting minute</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofhour</td>\n<td>startofhour(\"dob\")</td>\n<td>rounds the datetime field to the starting hour</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofday</td>\n<td>startofday(\"dob\")</td>\n<td>rounds the datetime field to the starting day</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofmonth</td>\n<td>startofmonth(\"dob\")</td>\n<td>rounds the datetime field to the starting month</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofweek</td>\n<td>startofweek(\"dob\")</td>\n<td>rounds the datetime field to the starting week</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofyear</td>\n<td>startofyear(\"dob\")</td>\n<td>rounds the datetime field to the starting year</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum(\"col1\",\"col2\")</td>\n<td>sum of two or more columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>diff</td>\n<td>diff(\"col1\",\"col2\")</td>\n<td>difference between two columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>mul</td>\n<td>mul(\"col1\",\"col2\")</td>\n<td>multiplication of two columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>strcat</td>\n<td>strcat(\"col1\",\"col2\")</td>\n<td>concatenates two or more columns</td>\n<td>0.8.0</td>\n</tr>\n</tbody>\n</table>\n<p>For example, the data <code>[ { \"a\": 12, \"b\" : 20 }, { \"a\" : 6, \"b\": 32} ]</code> and the following uql query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| project &quot;a&quot;, &quot;triple&quot;=sum(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;),&quot;thrice&quot;=mul(&quot;a&quot;,3), sum(&quot;a&quot;,&quot;b&quot;),  diff(&quot;a&quot;,&quot;b&quot;), mul(&quot;a&quot;,&quot;b&quot;)</code>\n        </deckgo-highlight-code>\n<p>wil produce the following output</p>\n<deckgo-highlight-code language=\"csv\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">a,triple,thrice,sum,diff,mul\n12,36,36,32,-8,240\n6,18,18,38,-26,192</code>\n        </deckgo-highlight-code>\n<p>To apply multiple transformations over a field, repeat them with the same field name. For example, the uql query <code>extend \"name\"=tolower(\"name\"), \"name\"=trim(\"name\")</code> will apply tolower function and then trim function over the name field.</p>\n<h3>summarize</h3>\n<p><code>summarize</code> command aggregates the data by a string column. summarize command expects alias, summarize by fields and summarize function. Following are the valid summarize functions.</p>\n<table>\n<thead>\n<tr>\n<th>function keyword</th>\n<th>syntax</th>\n<th>description</th>\n<th>available from</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>count</td>\n<td>count()</td>\n<td>count of values</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum(\"age\")</td>\n<td>sum of age</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>min</td>\n<td>min(\"population\")</td>\n<td>min of population</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>max</td>\n<td>max(\"foo\")</td>\n<td>max of foo</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>mean</td>\n<td>mean(\"foo\")</td>\n<td>mean of foo</td>\n<td>0.8.0</td>\n</tr>\n</tbody>\n</table>\n<p>For example, the following data</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;city&quot;: &quot;tokyo&quot;, &quot;country&quot;: &quot;japan&quot;, &quot;population&quot;: 200 },\n  { &quot;city&quot;: &quot;newyork&quot;, &quot;country&quot;: &quot;usa&quot;, &quot;population&quot;: 60 },\n  { &quot;city&quot;: &quot;oslo&quot;, &quot;country&quot;: &quot;usa&quot;, &quot;population&quot;: 40 },\n  { &quot;city&quot;: &quot;new delhi&quot;, &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 180 },\n  { &quot;city&quot;: &quot;mumbai&quot;, &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 150 }\n]</code>\n        </deckgo-highlight-code>\n<p>and the following uql query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| summarize &quot;number of cities&quot;=count(), &quot;total population&quot;=sum(&quot;population&quot;) by &quot;country&quot;\n| extend &quot;country&quot;=toupper(&quot;country&quot;)\n| order by &quot;total population&quot; desc</code>\n        </deckgo-highlight-code>\n<p>will produce the output table like this</p>\n<deckgo-highlight-code language=\"csv\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">country,number of cities,total population\nINDIA,2,330\nJAPAN,1,200\nUSA,2,100</code>\n        </deckgo-highlight-code>\n<h3>parse-json</h3>\n<p><code>parse-json</code> is the first command that parses the output as json. This is optional in case if you use JSON/GraphQL URL.</p>\n<h3>parse-csv</h3>\n<p><code>parse-csv</code> is used to specify that the results are in csv format</p>\n<h3>parse-xml</h3>\n<p><code>parse-xml</code> is used to specify that the results are in xml format</p>\n<h3>parse-yaml</h3>\n<p><code>parse-yaml</code> is used to specify that the results are in xml format</p>\n<h3>count</h3>\n<p>count gives the number of results.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| count</code>\n        </deckgo-highlight-code>\n<h3>limit</h3>\n<p><code>limit</code> command restricts the number of results returned. For example, below query returns only 10 results</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| limit 10</code>\n        </deckgo-highlight-code>\n<h3>scope</h3>\n<p><code>scope</code> commands sets the context of the output data. It is useful when the results are insides nested json object.</p>\n<p>example</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">{\n  &quot;meta&quot;: { &quot;last-updated&quot;: &quot;2021-08-09&quot; },\n  &quot;count&quot;: 2,\n  &quot;users&quot;: [{ &quot;name&quot;: &quot;foo&quot; }, { &quot;name&quot;: &quot;bar&quot; }]\n}</code>\n        </deckgo-highlight-code>\n<p>and the following uql query just results the \"users\" and ignores the other root level properties.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| scope &quot;users&quot;</code>\n        </deckgo-highlight-code>","frontmatter":{"slug":"/wiki/uql","title":"UQL","previous_page_title":"Configuration","previous_page_slug":"/wiki/configuration","next_page_title":"JSON","next_page_slug":"/wiki/json"}}},"pageContext":{"id":"4ef95b82-1067-548f-bc48-f6fc12715874","frontmatter__slug":"/wiki/uql","__params":{"frontmatter__slug":"wiki"}}},
    "staticQueryHashes": ["1915384699","561970757"]}